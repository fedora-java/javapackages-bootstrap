From c1a6d8a24353bd3e1f1867ec06ada0c233c779dc Mon Sep 17 00:00:00 2001
From: Mikolaj Izdebski <mizdebsk@redhat.com>
Date: Mon, 30 Nov 2020 12:16:22 +0100
Subject: [PATCH 2/2] Remove use of sun.misc.Unsafe

Forwarded: not-needed
---
 .../com/google/common/cache/LongAddables.java |  12 +-
 .../common/hash/LittleEndianByteArray.java    | 109 +---------------
 .../com/google/common/hash/LongAddables.java  |  12 +-
 .../common/primitives/UnsignedBytes.java      | 119 ------------------
 .../util/concurrent/AbstractFuture.java       | 104 +--------------
 5 files changed, 4 insertions(+), 352 deletions(-)

diff --git a/guava/src/com/google/common/cache/LongAddables.java b/guava/src/com/google/common/cache/LongAddables.java
index 249c6e149d..cd5d14b1af 100644
--- a/guava/src/com/google/common/cache/LongAddables.java
+++ b/guava/src/com/google/common/cache/LongAddables.java
@@ -30,17 +30,7 @@ final class LongAddables {
 
   static {
     Supplier<LongAddable> supplier;
-    try {
-      // trigger static initialization of the LongAdder class, which may fail
-      LongAdder unused = new LongAdder();
-      supplier =
-          new Supplier<LongAddable>() {
-            @Override
-            public LongAddable get() {
-              return new LongAdder();
-            }
-          };
-    } catch (Throwable t) { // we really want to catch *everything*
+    {
       supplier =
           new Supplier<LongAddable>() {
             @Override
diff --git a/guava/src/com/google/common/hash/LittleEndianByteArray.java b/guava/src/com/google/common/hash/LittleEndianByteArray.java
index 625201547d..a7389abc4a 100644
--- a/guava/src/com/google/common/hash/LittleEndianByteArray.java
+++ b/guava/src/com/google/common/hash/LittleEndianByteArray.java
@@ -16,7 +16,6 @@ package com.google.common.hash;
 
 import com.google.common.primitives.Longs;
 import java.nio.ByteOrder;
-import sun.misc.Unsafe;
 
 /**
  * Utility functions for loading and storing values from a byte array.
@@ -104,7 +103,7 @@ final class LittleEndianByteArray {
    * that is slower than Unsafe.get/store but faster than the pure-Java mask-and-shift.
    */
   static boolean usingUnsafe() {
-    return (byteArray instanceof UnsafeByteArray);
+    return false;
   }
 
   /**
@@ -119,90 +118,6 @@ final class LittleEndianByteArray {
     void putLongLittleEndian(byte[] array, int offset, long value);
   }
 
-  /**
-   * The only reference to Unsafe is in this nested class. We set things up so that if
-   * Unsafe.theUnsafe is inaccessible, the attempt to load the nested class fails, and the outer
-   * class's static initializer can fall back on a non-Unsafe version.
-   */
-  private enum UnsafeByteArray implements LittleEndianBytes {
-    // Do *not* change the order of these constants!
-    UNSAFE_LITTLE_ENDIAN {
-      @Override
-      public long getLongLittleEndian(byte[] array, int offset) {
-        return theUnsafe.getLong(array, (long) offset + BYTE_ARRAY_BASE_OFFSET);
-      }
-
-      @Override
-      public void putLongLittleEndian(byte[] array, int offset, long value) {
-        theUnsafe.putLong(array, (long) offset + BYTE_ARRAY_BASE_OFFSET, value);
-      }
-    },
-    UNSAFE_BIG_ENDIAN {
-      @Override
-      public long getLongLittleEndian(byte[] array, int offset) {
-        long bigEndian = theUnsafe.getLong(array, (long) offset + BYTE_ARRAY_BASE_OFFSET);
-        // The hardware is big-endian, so we need to reverse the order of the bytes.
-        return Long.reverseBytes(bigEndian);
-      }
-
-      @Override
-      public void putLongLittleEndian(byte[] array, int offset, long value) {
-        // Reverse the order of the bytes before storing, since we're on big-endian hardware.
-        long littleEndianValue = Long.reverseBytes(value);
-        theUnsafe.putLong(array, (long) offset + BYTE_ARRAY_BASE_OFFSET, littleEndianValue);
-      }
-    };
-
-    // Provides load and store operations that use native instructions to get better performance.
-    private static final Unsafe theUnsafe;
-
-    // The offset to the first element in a byte array.
-    private static final int BYTE_ARRAY_BASE_OFFSET;
-
-    /**
-     * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple
-     * call to Unsafe.getUnsafe when integrating into a jdk.
-     *
-     * @return a sun.misc.Unsafe instance if successful
-     */
-    private static sun.misc.Unsafe getUnsafe() {
-      try {
-        return sun.misc.Unsafe.getUnsafe();
-      } catch (SecurityException tryReflectionInstead) {
-        // We'll try reflection instead.
-      }
-      try {
-        return java.security.AccessController.doPrivileged(
-            new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {
-              @Override
-              public sun.misc.Unsafe run() throws Exception {
-                Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;
-                for (java.lang.reflect.Field f : k.getDeclaredFields()) {
-                  f.setAccessible(true);
-                  Object x = f.get(null);
-                  if (k.isInstance(x)) {
-                    return k.cast(x);
-                  }
-                }
-                throw new NoSuchFieldError("the Unsafe");
-              }
-            });
-      } catch (java.security.PrivilegedActionException e) {
-        throw new RuntimeException("Could not initialize intrinsics", e.getCause());
-      }
-    }
-
-    static {
-      theUnsafe = getUnsafe();
-      BYTE_ARRAY_BASE_OFFSET = theUnsafe.arrayBaseOffset(byte[].class);
-
-      // sanity check - this should never fail
-      if (theUnsafe.arrayIndexScale(byte[].class) != 1) {
-        throw new AssertionError();
-      }
-    }
-  }
-
   /** Fallback implementation for when Unsafe is not available in our current environment. */
   private enum JavaLittleEndianBytes implements LittleEndianBytes {
     INSTANCE {
@@ -231,28 +146,6 @@ final class LittleEndianByteArray {
 
   static {
     LittleEndianBytes theGetter = JavaLittleEndianBytes.INSTANCE;
-    try {
-      /*
-       * UnsafeByteArray uses Unsafe.getLong() in an unsupported way, which is known to cause
-       * crashes on Android when running in 32-bit mode. For maximum safety, we shouldn't use
-       * Unsafe.getLong() at all, but the performance benefit on x86_64 is too great to ignore, so
-       * as a compromise, we enable the optimization only on platforms that we specifically know to
-       * work.
-       *
-       * In the future, the use of Unsafe.getLong() should be replaced by ByteBuffer.getLong(),
-       * which will have an efficient native implementation in JDK 9.
-       *
-       */
-      String arch = System.getProperty("os.arch");
-      if ("amd64".equals(arch)) {
-        theGetter =
-            ByteOrder.nativeOrder().equals(ByteOrder.LITTLE_ENDIAN)
-                ? UnsafeByteArray.UNSAFE_LITTLE_ENDIAN
-                : UnsafeByteArray.UNSAFE_BIG_ENDIAN;
-      }
-    } catch (Throwable t) {
-      // ensure we really catch *everything*
-    }
     byteArray = theGetter;
   }
 
diff --git a/guava/src/com/google/common/hash/LongAddables.java b/guava/src/com/google/common/hash/LongAddables.java
index 7c371ec88f..2ea1adec29 100644
--- a/guava/src/com/google/common/hash/LongAddables.java
+++ b/guava/src/com/google/common/hash/LongAddables.java
@@ -28,17 +28,7 @@ final class LongAddables {
 
   static {
     Supplier<LongAddable> supplier;
-    try {
-      // trigger static initialization of the LongAdder class, which may fail
-      LongAdder unused = new LongAdder();
-      supplier =
-          new Supplier<LongAddable>() {
-            @Override
-            public LongAddable get() {
-              return new LongAdder();
-            }
-          };
-    } catch (Throwable t) { // we really want to catch *everything*
+    {
       supplier =
           new Supplier<LongAddable>() {
             @Override
diff --git a/guava/src/com/google/common/primitives/UnsignedBytes.java b/guava/src/com/google/common/primitives/UnsignedBytes.java
index db4f489e49..c6d1833b71 100644
--- a/guava/src/com/google/common/primitives/UnsignedBytes.java
+++ b/guava/src/com/google/common/primitives/UnsignedBytes.java
@@ -26,7 +26,6 @@ import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import java.nio.ByteOrder;
 import java.util.Arrays;
 import java.util.Comparator;
-import sun.misc.Unsafe;
 
 /**
  * Static utility methods pertaining to {@code byte} primitives that interpret values as
@@ -292,124 +291,6 @@ public final class UnsignedBytes {
 
     static final Comparator<byte[]> BEST_COMPARATOR = getBestComparator();
 
-    @VisibleForTesting
-    enum UnsafeComparator implements Comparator<byte[]> {
-      INSTANCE;
-
-      static final boolean BIG_ENDIAN = ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN);
-
-      /*
-       * The following static final fields exist for performance reasons.
-       *
-       * In UnsignedBytesBenchmark, accessing the following objects via static final fields is the
-       * fastest (more than twice as fast as the Java implementation, vs ~1.5x with non-final static
-       * fields, on x86_32) under the Hotspot server compiler. The reason is obviously that the
-       * non-final fields need to be reloaded inside the loop.
-       *
-       * And, no, defining (final or not) local variables out of the loop still isn't as good
-       * because the null check on the theUnsafe object remains inside the loop and
-       * BYTE_ARRAY_BASE_OFFSET doesn't get constant-folded.
-       *
-       * The compiler can treat static final fields as compile-time constants and can constant-fold
-       * them while (final or not) local variables are run time values.
-       */
-
-      static final Unsafe theUnsafe = getUnsafe();
-
-      /** The offset to the first element in a byte array. */
-      static final int BYTE_ARRAY_BASE_OFFSET = theUnsafe.arrayBaseOffset(byte[].class);
-
-      static {
-        // fall back to the safer pure java implementation unless we're in
-        // a 64-bit JVM with an 8-byte aligned field offset.
-        if (!("64".equals(System.getProperty("sun.arch.data.model"))
-            && (BYTE_ARRAY_BASE_OFFSET % 8) == 0
-            // sanity check - this should never fail
-            && theUnsafe.arrayIndexScale(byte[].class) == 1)) {
-          throw new Error(); // force fallback to PureJavaComparator
-        }
-      }
-
-      /**
-       * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple
-       * call to Unsafe.getUnsafe when integrating into a jdk.
-       *
-       * @return a sun.misc.Unsafe
-       */
-      private static sun.misc.Unsafe getUnsafe() {
-        try {
-          return sun.misc.Unsafe.getUnsafe();
-        } catch (SecurityException e) {
-          // that's okay; try reflection instead
-        }
-        try {
-          return java.security.AccessController.doPrivileged(
-              new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {
-                @Override
-                public sun.misc.Unsafe run() throws Exception {
-                  Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;
-                  for (java.lang.reflect.Field f : k.getDeclaredFields()) {
-                    f.setAccessible(true);
-                    Object x = f.get(null);
-                    if (k.isInstance(x)) {
-                      return k.cast(x);
-                    }
-                  }
-                  throw new NoSuchFieldError("the Unsafe");
-                }
-              });
-        } catch (java.security.PrivilegedActionException e) {
-          throw new RuntimeException("Could not initialize intrinsics", e.getCause());
-        }
-      }
-
-      @Override
-      public int compare(byte[] left, byte[] right) {
-        int stride = 8;
-        int minLength = Math.min(left.length, right.length);
-        int strideLimit = minLength & ~(stride - 1);
-        int i;
-
-        /*
-         * Compare 8 bytes at a time. Benchmarking on x86 shows a stride of 8 bytes is no slower
-         * than 4 bytes even on 32-bit. On the other hand, it is substantially faster on 64-bit.
-         */
-        for (i = 0; i < strideLimit; i += stride) {
-          long lw = theUnsafe.getLong(left, BYTE_ARRAY_BASE_OFFSET + (long) i);
-          long rw = theUnsafe.getLong(right, BYTE_ARRAY_BASE_OFFSET + (long) i);
-          if (lw != rw) {
-            if (BIG_ENDIAN) {
-              return UnsignedLongs.compare(lw, rw);
-            }
-
-            /*
-             * We want to compare only the first index where left[index] != right[index]. This
-             * corresponds to the least significant nonzero byte in lw ^ rw, since lw and rw are
-             * little-endian. Long.numberOfTrailingZeros(diff) tells us the least significant
-             * nonzero bit, and zeroing out the first three bits of L.nTZ gives us the shift to get
-             * that least significant nonzero byte.
-             */
-            int n = Long.numberOfTrailingZeros(lw ^ rw) & ~0x7;
-            return ((int) ((lw >>> n) & UNSIGNED_MASK)) - ((int) ((rw >>> n) & UNSIGNED_MASK));
-          }
-        }
-
-        // The epilogue to cover the last (minLength % stride) elements.
-        for (; i < minLength; i++) {
-          int result = UnsignedBytes.compare(left[i], right[i]);
-          if (result != 0) {
-            return result;
-          }
-        }
-        return left.length - right.length;
-      }
-
-      @Override
-      public String toString() {
-        return "UnsignedBytes.lexicographicalComparator() (sun.misc.Unsafe version)";
-      }
-    }
-
     enum PureJavaComparator implements Comparator<byte[]> {
       INSTANCE;
 
diff --git a/guava/src/com/google/common/util/concurrent/AbstractFuture.java b/guava/src/com/google/common/util/concurrent/AbstractFuture.java
index fc408a92d2..b610d98994 100644
--- a/guava/src/com/google/common/util/concurrent/AbstractFuture.java
+++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java
@@ -154,13 +154,9 @@ public abstract class AbstractFuture<V extends @Nullable Object> extends Interna
 
   static {
     AtomicHelper helper;
-    Throwable thrownUnsafeFailure = null;
     Throwable thrownAtomicReferenceFieldUpdaterFailure = null;
 
-    try {
-      helper = new UnsafeAtomicHelper();
-    } catch (Throwable unsafeFailure) {
-      thrownUnsafeFailure = unsafeFailure;
+    {
       // catch absolutely everything and fall through to our 'SafeAtomicHelper'
       // The access control checks that ARFU does means the caller class has to be AbstractFuture
       // instead of SafeAtomicHelper, so we annoyingly define these here
@@ -191,7 +187,6 @@ public abstract class AbstractFuture<V extends @Nullable Object> extends Interna
     // Log after all static init is finished; if an installed logger uses any Futures methods, it
     // shouldn't break in cases where reflection is missing/broken.
     if (thrownAtomicReferenceFieldUpdaterFailure != null) {
-      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);
       log.log(
           Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);
     }
@@ -1304,103 +1299,6 @@ public abstract class AbstractFuture<V extends @Nullable Object> extends Interna
     abstract boolean casValue(AbstractFuture<?> future, @CheckForNull Object expect, Object update);
   }
 
-  /**
-   * {@link AtomicHelper} based on {@link sun.misc.Unsafe}.
-   *
-   * <p>Static initialization of this class will fail if the {@link sun.misc.Unsafe} object cannot
-   * be accessed.
-   */
-  @SuppressWarnings("sunapi")
-  private static final class UnsafeAtomicHelper extends AtomicHelper {
-    static final sun.misc.Unsafe UNSAFE;
-    static final long LISTENERS_OFFSET;
-    static final long WAITERS_OFFSET;
-    static final long VALUE_OFFSET;
-    static final long WAITER_THREAD_OFFSET;
-    static final long WAITER_NEXT_OFFSET;
-
-    static {
-      sun.misc.Unsafe unsafe = null;
-      try {
-        unsafe = sun.misc.Unsafe.getUnsafe();
-      } catch (SecurityException tryReflectionInstead) {
-        try {
-          unsafe =
-              AccessController.doPrivileged(
-                  new PrivilegedExceptionAction<sun.misc.Unsafe>() {
-                    @Override
-                    public sun.misc.Unsafe run() throws Exception {
-                      Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;
-                      for (java.lang.reflect.Field f : k.getDeclaredFields()) {
-                        f.setAccessible(true);
-                        Object x = f.get(null);
-                        if (k.isInstance(x)) {
-                          return k.cast(x);
-                        }
-                      }
-                      throw new NoSuchFieldError("the Unsafe");
-                    }
-                  });
-        } catch (PrivilegedActionException e) {
-          throw new RuntimeException("Could not initialize intrinsics", e.getCause());
-        }
-      }
-      try {
-        Class<?> abstractFuture = AbstractFuture.class;
-        WAITERS_OFFSET = unsafe.objectFieldOffset(abstractFuture.getDeclaredField("waiters"));
-        LISTENERS_OFFSET = unsafe.objectFieldOffset(abstractFuture.getDeclaredField("listeners"));
-        VALUE_OFFSET = unsafe.objectFieldOffset(abstractFuture.getDeclaredField("value"));
-        WAITER_THREAD_OFFSET = unsafe.objectFieldOffset(Waiter.class.getDeclaredField("thread"));
-        WAITER_NEXT_OFFSET = unsafe.objectFieldOffset(Waiter.class.getDeclaredField("next"));
-        UNSAFE = unsafe;
-      } catch (Exception e) {
-        throwIfUnchecked(e);
-        throw new RuntimeException(e);
-      }
-    }
-
-    @Override
-    void putThread(Waiter waiter, Thread newValue) {
-      UNSAFE.putObject(waiter, WAITER_THREAD_OFFSET, newValue);
-    }
-
-    @Override
-    void putNext(Waiter waiter, @CheckForNull Waiter newValue) {
-      UNSAFE.putObject(waiter, WAITER_NEXT_OFFSET, newValue);
-    }
-
-    /** Performs a CAS operation on the {@link #waiters} field. */
-    @Override
-    boolean casWaiters(
-        AbstractFuture<?> future, @CheckForNull Waiter expect, @CheckForNull Waiter update) {
-      return UNSAFE.compareAndSwapObject(future, WAITERS_OFFSET, expect, update);
-    }
-
-    /** Performs a CAS operation on the {@link #listeners} field. */
-    @Override
-    boolean casListeners(AbstractFuture<?> future, @CheckForNull Listener expect, Listener update) {
-      return UNSAFE.compareAndSwapObject(future, LISTENERS_OFFSET, expect, update);
-    }
-
-    /** Performs a GAS operation on the {@link #listeners} field. */
-    @Override
-    Listener gasListeners(AbstractFuture<?> future, Listener update) {
-      return (Listener) UNSAFE.getAndSetObject(future, LISTENERS_OFFSET, update);
-    }
-
-    /** Performs a GAS operation on the {@link #waiters} field. */
-    @Override
-    Waiter gasWaiters(AbstractFuture<?> future, Waiter update) {
-      return (Waiter) UNSAFE.getAndSetObject(future, WAITERS_OFFSET, update);
-    }
-
-    /** Performs a CAS operation on the {@link #value} field. */
-    @Override
-    boolean casValue(AbstractFuture<?> future, @CheckForNull Object expect, Object update) {
-      return UNSAFE.compareAndSwapObject(future, VALUE_OFFSET, expect, update);
-    }
-  }
-
   /** {@link AtomicHelper} based on {@link AtomicReferenceFieldUpdater}. */
   @SuppressWarnings("rawtypes")
   private static final class SafeAtomicHelper extends AtomicHelper {
-- 
2.39.2

