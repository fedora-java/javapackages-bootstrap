From a5d3861537e4caebcbef3301ec377572d7fee7fc Mon Sep 17 00:00:00 2001
From: Mikolaj Izdebski <mizdebsk@redhat.com>
Date: Sun, 22 Nov 2020 17:59:12 +0100
Subject: [PATCH] Add explicit casts to fix compilation with ECJ

Forwarded: no

---
 .../java/org/assertj/core/api/AbstractObjectAssert.java   | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/assertj/core/api/AbstractObjectAssert.java b/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
index 6b7abbb27..c00671ec0 100644
--- a/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
+++ b/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
@@ -788,7 +788,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    */
   @CheckReturnValue
   public AbstractObjectAssert<?, ?> extracting(String propertyOrField) {
-    return super.extracting(propertyOrField, this::newObjectAssert);
+    return super.extracting(propertyOrField, (AssertFactory<Object, AbstractObjectAssert<?, ?>>)this::newObjectAssert);
   }
 
   /**
@@ -834,7 +834,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
   @CheckReturnValue
   public <ASSERT extends AbstractAssert<?, ?>> ASSERT extracting(String propertyOrField,
                                                                  InstanceOfAssertFactory<?, ASSERT> assertFactory) {
-    return super.extracting(propertyOrField, this::newObjectAssert).asInstanceOf(assertFactory);
+    return super.extracting(propertyOrField, (AssertFactory<Object, AbstractObjectAssert<?, ?>>)this::newObjectAssert).asInstanceOf(assertFactory);
   }
 
   /**
@@ -900,7 +900,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    */
   @CheckReturnValue
   public <T> AbstractObjectAssert<?, T> extracting(Function<? super ACTUAL, T> extractor) {
-    return super.extracting(extractor, this::newObjectAssert);
+    return super.extracting(extractor, (AssertFactory<T, AbstractObjectAssert<?, T>>)this::newObjectAssert);
   }
 
   /**
@@ -938,7 +938,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
   @CheckReturnValue
   public <T, ASSERT extends AbstractAssert<?, ?>> ASSERT extracting(Function<? super ACTUAL, T> extractor,
                                                                     InstanceOfAssertFactory<?, ASSERT> assertFactory) {
-    return super.extracting(extractor, this::newObjectAssert).asInstanceOf(assertFactory);
+    return super.extracting(extractor, (AssertFactory<Object, AbstractObjectAssert<?, ?>>)this::newObjectAssert).asInstanceOf(assertFactory);
   }
 
   /**
-- 
2.26.2

