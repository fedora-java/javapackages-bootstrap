From 5c0319d4b302c5099aaf45e8d1f57e099067b554 Mon Sep 17 00:00:00 2001
From: Mikolaj Izdebski <mizdebsk@redhat.com>
Date: Sun, 22 Nov 2020 17:59:12 +0100
Subject: [PATCH] Add explicit casts to fix compilation with ECJ

Forwarded: no
---
 .../java/org/assertj/core/api/AbstractObjectAssert.java   | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
index a1aa1ed8a..f318772a7 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
@@ -840,7 +840,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    */
   @CheckReturnValue
   public AbstractObjectAssert<?, ?> extracting(String propertyOrField) {
-    return super.extracting(propertyOrField, this::newObjectAssert);
+    return super.extracting(propertyOrField, (AssertFactory<Object, AbstractObjectAssert<?, ?>>)this::newObjectAssert);
   }
 
   /**
@@ -886,7 +886,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
   @CheckReturnValue
   public <ASSERT extends AbstractAssert<?, ?>> ASSERT extracting(String propertyOrField,
                                                                  InstanceOfAssertFactory<?, ASSERT> assertFactory) {
-    return super.extracting(propertyOrField, this::newObjectAssert).asInstanceOf(assertFactory);
+    return super.extracting(propertyOrField, (AssertFactory<Object, AbstractObjectAssert<?, ?>>)this::newObjectAssert).asInstanceOf(assertFactory);
   }
 
   /**
@@ -959,7 +959,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    */
   @CheckReturnValue
   public <T> AbstractObjectAssert<?, T> extracting(Function<? super ACTUAL, T> extractor) {
-    return super.extracting(extractor, this::newObjectAssert);
+    return super.extracting(extractor, (AssertFactory<T, AbstractObjectAssert<?, T>>)this::newObjectAssert);
   }
 
   /**
@@ -997,7 +997,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
   @CheckReturnValue
   public <T, ASSERT extends AbstractAssert<?, ?>> ASSERT extracting(Function<? super ACTUAL, T> extractor,
                                                                     InstanceOfAssertFactory<?, ASSERT> assertFactory) {
-    return super.extracting(extractor, this::newObjectAssert).asInstanceOf(assertFactory);
+    return super.extracting(extractor, (AssertFactory<Object, AbstractObjectAssert<?, ?>>)this::newObjectAssert).asInstanceOf(assertFactory);
   }
 
   /**
-- 
2.41.0

