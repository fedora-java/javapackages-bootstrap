From 99283eb6f6d81a7b6f109cae23b2fed39b00822d Mon Sep 17 00:00:00 2001
From: Mikolaj Izdebski <mizdebsk@redhat.com>
Date: Mon, 12 Oct 2015 15:48:16 +0200
Subject: [PATCH 1/2] Port to Maven 3 API

Related: https://issues.apache.org/jira/browse/MENFORCER-277

Forwarded: no

---
 enforcer-rules/pom.xml                        |  6 ++-
 .../enforcer/AbstractBanDependencies.java     | 13 +++--
 .../enforcer/BanTransitiveDependencies.java   |  7 ++-
 .../maven/plugins/enforcer/BannedPlugins.java |  7 +--
 .../enforcer/DependencyConvergence.java       | 29 +++++------
 .../enforcer/RequirePluginVersions.java       | 48 +++++++------------
 .../enforcer/RequireUpperBoundDeps.java       | 31 +++++-------
 .../enforcer/utils/DependencyVersionMap.java  |  6 +--
 .../enforcer/utils/EnforcerRuleUtils.java     | 40 +++-------------
 pom.xml                                       | 11 +++--
 10 files changed, 80 insertions(+), 118 deletions(-)

diff --git a/enforcer-rules/pom.xml b/enforcer-rules/pom.xml
index bef8d32..28dc255 100644
--- a/enforcer-rules/pom.xml
+++ b/enforcer-rules/pom.xml
@@ -43,12 +43,16 @@
     </dependency>
     <dependency>
       <groupId>org.apache.maven</groupId>
-      <artifactId>maven-core</artifactId>
+      <artifactId>maven-compat</artifactId>
     </dependency>
     <dependency>
       <groupId>org.apache.maven.shared</groupId>
       <artifactId>maven-common-artifact-filters</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.apache.maven.shared</groupId>
+      <artifactId>maven-artifact-transfer</artifactId>
+    </dependency>
     <dependency>
       <groupId>org.codehaus.plexus</groupId>
       <artifactId>plexus-utils</artifactId>
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/AbstractBanDependencies.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/AbstractBanDependencies.java
index 489bb7c..07572c0 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/AbstractBanDependencies.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/AbstractBanDependencies.java
@@ -23,7 +23,9 @@ import org.apache.maven.artifact.Artifact;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
 import org.apache.maven.plugin.logging.Log;
+import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.ProjectBuildingRequest;
 import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
 import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;
 import org.apache.maven.shared.dependency.graph.DependencyNode;
@@ -53,10 +55,11 @@ public abstract class AbstractBanDependencies
     {
 
         // get the project
-        MavenProject project = null;
+        ProjectBuildingRequest projectBuildingRequest = null;
         try
         {
-            project = (MavenProject) helper.evaluate( "${project}" );
+            projectBuildingRequest = new DefaultProjectBuildingRequest( (ProjectBuildingRequest) helper.evaluate( "${session.projectBuildingRequest}" ) );
+		    projectBuildingRequest.setProject( (MavenProject) helper.evaluate( "${project}" ) );
         }
         catch ( ExpressionEvaluationException eee )
         {
@@ -83,7 +86,7 @@ public abstract class AbstractBanDependencies
         }
 
         // get the correct list of dependencies
-        Set<Artifact> dependencies = getDependenciesToCheck( project );
+        Set<Artifact> dependencies = getDependenciesToCheck( projectBuildingRequest );
 
         // look for banned dependencies
         Set<Artifact> foundExcludes = checkDependencies( dependencies, helper.getLog() );
@@ -114,12 +117,12 @@ public abstract class AbstractBanDependencies
         return "Found Banned Dependency: " + artifact.getId() + "\n";
     }
 
-    protected Set<Artifact> getDependenciesToCheck( MavenProject project )
+    protected Set<Artifact> getDependenciesToCheck( ProjectBuildingRequest projectBuildingRequest )
     {
         Set<Artifact> dependencies = null;
         try
         {
-            DependencyNode node = graphBuilder.buildDependencyGraph( project, null );
+            DependencyNode node = graphBuilder.buildDependencyGraph( projectBuildingRequest, null );
             if ( searchTransitive )
             {
                 dependencies = getAllDescendants( node );
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BanTransitiveDependencies.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BanTransitiveDependencies.java
index 0d4db57..86188ba 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BanTransitiveDependencies.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BanTransitiveDependencies.java
@@ -27,7 +27,9 @@ import org.apache.maven.enforcer.rule.api.EnforcerRule;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
 import org.apache.maven.plugins.enforcer.utils.ArtifactMatcher;
+import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.ProjectBuildingRequest;
 import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
 import org.apache.maven.shared.dependency.graph.DependencyNode;
 import org.apache.maven.shared.dependency.graph.internal.DefaultDependencyGraphBuilder;
@@ -157,8 +159,9 @@ public class BanTransitiveDependencies
 
         try
         {
-            MavenProject project = (MavenProject) helper.evaluate( "${project}" );
-            rootNode = createDependencyGraphBuilder().buildDependencyGraph( project, null );
+            ProjectBuildingRequest projectBuildingRequest = new DefaultProjectBuildingRequest( (ProjectBuildingRequest) helper.evaluate( "${session.projectBuildingRequest}" ) );
+			projectBuildingRequest.setProject( (MavenProject) helper.evaluate( "${project}" ) );
+            rootNode = createDependencyGraphBuilder().buildDependencyGraph( projectBuildingRequest, null );
         }
         catch ( Exception e )
         {
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BannedPlugins.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BannedPlugins.java
index ddcfb26..788a2ca 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BannedPlugins.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/BannedPlugins.java
@@ -23,6 +23,7 @@ import java.util.Set;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.ProjectBuildingRequest;
 
 /**
  * This rule checks that lists of plugins are not included.
@@ -32,10 +33,10 @@ import org.apache.maven.project.MavenProject;
 public class BannedPlugins
     extends BannedDependencies
 {
-    @Override
-    protected Set<Artifact> getDependenciesToCheck( MavenProject project )
+	@Override
+    protected Set<Artifact> getDependenciesToCheck( ProjectBuildingRequest projectBuildingRequest )
     {
-        return project.getPluginArtifacts();
+        return projectBuildingRequest.getProject().getPluginArtifacts();
     }
 
     @Override
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/DependencyConvergence.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/DependencyConvergence.java
index ed5d300..bff59f0 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/DependencyConvergence.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/DependencyConvergence.java
@@ -24,20 +24,19 @@ import java.util.Collections;
 import java.util.List;
 
 import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.resolver.ArtifactCollector;
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
 import org.apache.maven.enforcer.rule.api.EnforcerRule;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
 import org.apache.maven.plugin.logging.Log;
 import org.apache.maven.plugins.enforcer.utils.DependencyVersionMap;
+import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.shared.dependency.tree.DependencyNode;
-import org.apache.maven.shared.dependency.tree.DependencyTreeBuilder;
-import org.apache.maven.shared.dependency.tree.DependencyTreeBuilderException;
+import org.apache.maven.project.ProjectBuildingRequest;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;
+import org.apache.maven.shared.dependency.graph.DependencyNode;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 
@@ -74,17 +73,13 @@ public class DependencyConvergence
     {
         try
         {
-            MavenProject project = (MavenProject) helper.evaluate( "${project}" );
-            DependencyTreeBuilder dependencyTreeBuilder =
-                (DependencyTreeBuilder) helper.getComponent( DependencyTreeBuilder.class );
+            ProjectBuildingRequest projectBuildingRequest = new DefaultProjectBuildingRequest( (ProjectBuildingRequest) helper.evaluate( "${session.projectBuildingRequest}" ) );
+            projectBuildingRequest.setProject( (MavenProject) helper.evaluate( "${project}" ) );
+            DependencyGraphBuilder dependencyGraphBuilder = (DependencyGraphBuilder) helper.getComponent( DependencyGraphBuilder.class );
             ArtifactRepository repository = (ArtifactRepository) helper.evaluate( "${localRepository}" );
-            ArtifactFactory factory = (ArtifactFactory) helper.getComponent( ArtifactFactory.class );
-            ArtifactMetadataSource metadataSource =
-                (ArtifactMetadataSource) helper.getComponent( ArtifactMetadataSource.class );
-            ArtifactCollector collector = (ArtifactCollector) helper.getComponent( ArtifactCollector.class );
             ArtifactFilter filter = null; // we need to evaluate all scopes
-            DependencyNode node = dependencyTreeBuilder.buildDependencyTree( project, repository, factory,
-                                                                             metadataSource, filter, collector );
+            projectBuildingRequest.setLocalRepository( repository );
+            DependencyNode node = dependencyGraphBuilder.buildDependencyGraph( projectBuildingRequest, filter );
             return node;
         }
         catch ( ExpressionEvaluationException e )
@@ -95,9 +90,9 @@ public class DependencyConvergence
         {
             throw new EnforcerRuleException( "Unable to lookup a component " + e.getLocalizedMessage(), e );
         }
-        catch ( DependencyTreeBuilderException e )
+        catch ( DependencyGraphBuilderException e )
         {
-            throw new EnforcerRuleException( "Could not build dependency tree " + e.getLocalizedMessage(), e );
+            throw new EnforcerRuleException( "Could not build dependency graph " + e.getLocalizedMessage(), e );
         }
     }
 
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequirePluginVersions.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequirePluginVersions.java
index 9e840da..f2e2cc7 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequirePluginVersions.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequirePluginVersions.java
@@ -37,7 +37,6 @@ import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
 import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.ArtifactResolver;
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.artifact.versioning.VersionRange;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
@@ -63,8 +62,12 @@ import org.apache.maven.plugin.version.PluginVersionNotFoundException;
 import org.apache.maven.plugin.version.PluginVersionResolutionException;
 import org.apache.maven.plugins.enforcer.utils.EnforcerRuleUtils;
 import org.apache.maven.plugins.enforcer.utils.PluginWrapper;
+import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.ProjectBuildingRequest;
 import org.apache.maven.settings.Settings;
+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;
+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.util.ReflectionUtils;
@@ -168,12 +171,6 @@ public class RequirePluginVersions
     /** The resolver. */
     ArtifactResolver resolver;
 
-    /** The local. */
-    ArtifactRepository local;
-
-    /** The remote repositories. */
-    List<ArtifactRepository> remoteRepositories;
-
     /** The log. */
     Log log;
 
@@ -219,8 +216,8 @@ public class RequirePluginVersions
             pluginManager = (PluginManager) helper.getComponent( PluginManager.class );
             factory = (ArtifactFactory) helper.getComponent( ArtifactFactory.class );
             resolver = (ArtifactResolver) helper.getComponent( ArtifactResolver.class );
-            local = (ArtifactRepository) helper.evaluate( "${localRepository}" );
-            remoteRepositories = project.getRemoteArtifactRepositories();
+            ProjectBuildingRequest projectBuildingRequest = new DefaultProjectBuildingRequest( (ProjectBuildingRequest) helper.evaluate( "${session.projectBuildingRequest}" ) );
+            projectBuildingRequest.setProject( project );
 
             utils = new EnforcerRuleUtils( helper );
 
@@ -291,7 +288,7 @@ public class RequirePluginVersions
                     {
                         newMsg.append( ". \tThe version currently in use is " );
 
-                        Plugin currentPlugin = findCurrentPlugin( plugin, project );
+                        Plugin currentPlugin = findCurrentPlugin( plugin, projectBuildingRequest );
 
                         if ( currentPlugin != null )
                         {
@@ -340,11 +337,7 @@ public class RequirePluginVersions
         {
             throw new EnforcerRuleException( e.getLocalizedMessage() );
         }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new EnforcerRuleException( e.getLocalizedMessage() );
-        }
-        catch ( ArtifactNotFoundException e )
+        catch ( ArtifactResolverException e )
         {
             throw new EnforcerRuleException( e.getLocalizedMessage() );
         }
@@ -513,12 +506,12 @@ public class RequirePluginVersions
      * @param project project to search
      * @return matching plugin, <code>null</code> if not found.
      */
-    protected Plugin findCurrentPlugin( Plugin plugin, MavenProject project )
+    protected Plugin findCurrentPlugin( Plugin plugin, ProjectBuildingRequest projectBuildingRequest )
     {
         Plugin found = null;
         try
         {
-            Model model = project.getModel();
+            Model model = projectBuildingRequest.getProject().getModel();
             Map<String, Plugin> plugins = model.getBuild().getPluginsAsMap();
             found = plugins.get( plugin.getKey() );
         }
@@ -529,7 +522,7 @@ public class RequirePluginVersions
 
         if ( found == null )
         {
-            found = resolvePlugin( plugin, project );
+            found = resolvePlugin( plugin, projectBuildingRequest );
         }
 
         return found;
@@ -542,24 +535,18 @@ public class RequirePluginVersions
      * @param project the project
      * @return the plugin
      */
-    protected Plugin resolvePlugin( Plugin plugin, MavenProject project )
+    protected Plugin resolvePlugin( Plugin plugin, ProjectBuildingRequest projectBuildingRequest )
     {
-
-        List<ArtifactRepository> pluginRepositories = project.getPluginArtifactRepositories();
         Artifact artifact =
             factory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(),
                                           VersionRange.createFromVersion( "LATEST" ) );
 
         try
         {
-            this.resolver.resolve( artifact, pluginRepositories, this.local );
+            this.resolver.resolveArtifact( projectBuildingRequest, artifact );
             plugin.setVersion( artifact.getVersion() );
         }
-        catch ( ArtifactResolutionException e )
-        {
-            //What does this mean?
-        }
-        catch ( ArtifactNotFoundException e )
+        catch ( ArtifactResolverException e )
         {
             //What does this mean?
         }
@@ -1034,13 +1021,12 @@ public class RequirePluginVersions
      *
      * @param project the project
      * @return the all plugin entries wrapped in a PluginWrapper Object
-     * @throws ArtifactResolutionException the artifact resolution exception
-     * @throws ArtifactNotFoundException the artifact not found exception
+     * @throws ArtifactResolverException the artifact resolution exception
      * @throws IOException Signals that an I/O exception has occurred.
      * @throws XmlPullParserException the xml pull parser exception
      */
     protected List<PluginWrapper> getAllPluginEntries( MavenProject project )
-        throws ArtifactResolutionException, ArtifactNotFoundException, IOException, XmlPullParserException
+        throws ArtifactResolverException, IOException, XmlPullParserException
     {
         List<PluginWrapper> plugins = new ArrayList<PluginWrapper>();
         // get all the pom models
@@ -1263,4 +1249,4 @@ public class RequirePluginVersions
     {
         return additionalPlugins;
     }
-}
\ No newline at end of file
+}
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequireUpperBoundDeps.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequireUpperBoundDeps.java
index 9769553..c14c56a 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequireUpperBoundDeps.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/RequireUpperBoundDeps.java
@@ -26,10 +26,7 @@ import java.util.List;
 import java.util.Map;
 
 import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.resolver.ArtifactCollector;
 import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
 import org.apache.maven.artifact.versioning.ArtifactVersion;
 import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
@@ -37,11 +34,13 @@ import org.apache.maven.artifact.versioning.OverConstrainedVersionException;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
 import org.apache.maven.plugin.logging.Log;
+import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
-import org.apache.maven.shared.dependency.tree.DependencyNode;
-import org.apache.maven.shared.dependency.tree.DependencyTreeBuilder;
-import org.apache.maven.shared.dependency.tree.DependencyTreeBuilderException;
-import org.apache.maven.shared.dependency.tree.traversal.DependencyNodeVisitor;
+import org.apache.maven.project.ProjectBuildingRequest;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;
+import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;
+import org.apache.maven.shared.dependency.graph.DependencyNode;
+import org.apache.maven.shared.dependency.graph.traversal.DependencyNodeVisitor;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 
@@ -105,18 +104,10 @@ public class RequireUpperBoundDeps
     {
         try
         {
-            MavenProject project = (MavenProject) helper.evaluate( "${project}" );
-            DependencyTreeBuilder dependencyTreeBuilder =
-                (DependencyTreeBuilder) helper.getComponent( DependencyTreeBuilder.class );
-            ArtifactRepository repository = (ArtifactRepository) helper.evaluate( "${localRepository}" );
-            ArtifactFactory factory = (ArtifactFactory) helper.getComponent( ArtifactFactory.class );
-            ArtifactMetadataSource metadataSource =
-                (ArtifactMetadataSource) helper.getComponent( ArtifactMetadataSource.class );
-            ArtifactCollector collector = (ArtifactCollector) helper.getComponent( ArtifactCollector.class );
-            ArtifactFilter filter = null; // we need to evaluate all scopes
-            DependencyNode node =
-                dependencyTreeBuilder.buildDependencyTree( project, repository, factory, metadataSource, filter,
-                                                           collector );
+            ProjectBuildingRequest projectBuildingRequest = new DefaultProjectBuildingRequest( (ProjectBuildingRequest) helper.evaluate( "${session.projectBuildingRequest}" ) );
+            projectBuildingRequest.setProject( (MavenProject) helper.evaluate( "${project}" ) );
+		    DependencyGraphBuilder dependencyGraphBuilder = (DependencyGraphBuilder) helper.getComponent( DependencyGraphBuilder.class );
+            DependencyNode node = dependencyGraphBuilder.buildDependencyGraph( projectBuildingRequest, null );
             return node;
         }
         catch ( ExpressionEvaluationException e )
@@ -127,7 +118,7 @@ public class RequireUpperBoundDeps
         {
             throw new EnforcerRuleException( "Unable to lookup a component " + e.getLocalizedMessage(), e );
         }
-        catch ( DependencyTreeBuilderException e )
+        catch ( DependencyGraphBuilderException e )
         {
             throw new EnforcerRuleException( "Could not build dependency tree " + e.getLocalizedMessage(), e );
         }
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/DependencyVersionMap.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/DependencyVersionMap.java
index b6213fa..2c2a645 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/DependencyVersionMap.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/DependencyVersionMap.java
@@ -26,8 +26,8 @@ import java.util.Map;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.plugin.logging.Log;
-import org.apache.maven.shared.dependency.tree.DependencyNode;
-import org.apache.maven.shared.dependency.tree.traversal.DependencyNodeVisitor;
+import org.apache.maven.shared.dependency.graph.DependencyNode;
+import org.apache.maven.shared.dependency.graph.traversal.DependencyNodeVisitor;
 
 /**
  * @author Brian Fox
@@ -132,4 +132,4 @@ public class DependencyVersionMap
         }
         return output;
     }
-}
\ No newline at end of file
+}
diff --git a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/EnforcerRuleUtils.java b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/EnforcerRuleUtils.java
index c122e10..3974a9e 100644
--- a/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/EnforcerRuleUtils.java
+++ b/enforcer-rules/src/main/java/org/apache/maven/plugins/enforcer/utils/EnforcerRuleUtils.java
@@ -23,12 +23,15 @@ import java.util.List;
 
 import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.resolver.ArtifactResolver;
 import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
 import org.apache.maven.model.Plugin;
 import org.apache.maven.model.ReportPlugin;
 import org.apache.maven.plugin.logging.Log;
+import org.apache.maven.project.DefaultProjectBuildingRequest;
 import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.ProjectBuildingRequest;
+import org.apache.maven.shared.artifact.resolve.ArtifactResolver;
+import org.apache.maven.shared.artifact.resolve.ArtifactResolverException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 
@@ -46,42 +49,14 @@ public class EnforcerRuleUtils
     /** The resolver. */
     ArtifactResolver resolver;
 
-    /** The local. */
-    ArtifactRepository local;
-
-    /** The remote repositories. */
-    List<ArtifactRepository> remoteRepositories;
-
     /** The log. */
     Log log;
 
     /** The project. */
-    MavenProject project;
+    ProjectBuildingRequest projectBuildingRequest;
 
     private EnforcerRuleHelper helper;
 
-    /**
-     * Instantiates a new enforcer rule utils.
-     *
-     * @param theFactory the the factory
-     * @param theResolver the the resolver
-     * @param theLocal the the local
-     * @param theRemoteRepositories the the remote repositories
-     * @param project the project
-     * @param theLog the the log
-     */
-    public EnforcerRuleUtils( ArtifactFactory theFactory, ArtifactResolver theResolver, ArtifactRepository theLocal,
-                              List<ArtifactRepository> theRemoteRepositories, MavenProject project, Log theLog )
-    {
-        super();
-        this.factory = theFactory;
-        this.resolver = theResolver;
-        this.local = theLocal;
-        this.remoteRepositories = theRemoteRepositories;
-        this.log = theLog;
-        this.project = project;
-    }
-
     /**
      * Instantiates a new enforcer rule utils.
      *
@@ -97,9 +72,8 @@ public class EnforcerRuleUtils
         {
             factory = (ArtifactFactory) helper.getComponent( ArtifactFactory.class );
             resolver = (ArtifactResolver) helper.getComponent( ArtifactResolver.class );
-            local = (ArtifactRepository) helper.evaluate( "${localRepository}" );
-            project = (MavenProject) helper.evaluate( "${project}" );
-            remoteRepositories = project.getRemoteArtifactRepositories();
+            projectBuildingRequest = new DefaultProjectBuildingRequest( (ProjectBuildingRequest) helper.evaluate( "${session.projectBuildingRequest}" ) );
+			projectBuildingRequest.setProject( (MavenProject) helper.evaluate( "${project}" ) );
         }
         catch ( ComponentLookupException e )
         {
diff --git a/pom.xml b/pom.xml
index 0dbbffd..bff1c24 100644
--- a/pom.xml
+++ b/pom.xml
@@ -63,7 +63,7 @@
     </site>
   </distributionManagement>
   <properties>
-    <maven.version>3.0</maven.version>
+    <maven.version>3.3.1</maven.version>
     <maven.site.path>enforcer-archives/enforcer-LATEST</maven.site.path>
 	<surefire.version>2.21.0</surefire.version>
   </properties>
@@ -139,16 +139,21 @@
         <artifactId>commons-codec</artifactId>
         <version>1.6</version>
       </dependency>
+      <dependency>
+        <groupId>org.apache.maven.shared</groupId>
+        <artifactId>maven-artifact-transfer</artifactId>
+        <version>3.0-SNAPSHOT</version>
+      </dependency>
       <dependency>
         <groupId>org.apache.maven.plugin-testing</groupId>
         <artifactId>maven-plugin-testing-harness</artifactId>
-        <version>2.1</version>
+        <version>3.3.0</version>
         <scope>test</scope>
       </dependency>
       <dependency>
         <groupId>org.apache.maven.shared</groupId>
         <artifactId>maven-dependency-tree</artifactId>
-        <version>2.2</version>
+        <version>3.0</version>
       </dependency>
       <dependency>
         <groupId>org.assertj</groupId>
-- 
2.25.4

